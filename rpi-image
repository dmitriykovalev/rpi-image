#!/usr/bin/env python3

import argparse
import contextlib
import dataclasses
import functools
import hashlib
import json
import lzma
import os
import pathlib
import re
import shlex
import shutil
import subprocess
import sys
import tempfile
import time
import urllib.error
import urllib.parse
import urllib.request
import zipfile

'''
https://wiki.debian.org/RaspberryPi/qemu-user-static

Allow kernel to run arbitrary executable file formats:

  apt-get update
  apt-get install -y qemu qemu-user-static binfmt-support

  update-binfmts --display
  ls -la /proc/sys/fs/binfmt_misc

Run inside docker container:

  docker run --rm -it --privileged -v `pwd`:/work --workdir /work debian:bullseye
  apt-get update && apt-get install -y python3 fdisk
'''

OS_LIST_URL = 'https://downloads.raspberrypi.org/os_list_imagingutility_v3.json'

# package: fdisk
SFDISK = '/sbin/sfdisk'

# package: util-linux
BLKID = '/sbin/blkid'
LSBLK = '/bin/lsblk'

# package: mount
MOUNT = '/bin/mount'
UMOUNT = '/bin/umount'
LOSETUP = '/sbin/losetup'

# package: e2fsprogs
E2FSK = '/sbin/e2fsck'
RESIZE2FS = '/sbin/resize2fs'

@dataclasses.dataclass(frozen=True)
class Partition:
  number: int
  type: str
  start_sectors: int
  size_sectors: int
  sector_size: int

  @property
  def end_sectors(self):
    return self.start_sectors + self.size_sectors

  @property
  def size(self):
    return self.size_sectors * self.sector_size

  @property
  def start(self):
    return self.start_sectors * self.sector_size

  @property
  def end(self):
    return self.start + self.size

@dataclasses.dataclass(frozen=True)
class Mount:
  host_path: pathlib.Path
  image_path: pathlib.Path
  read_only: bool

@dataclasses.dataclass(frozen=True)
class Hash:
  name: str
  hexdigest: str

def run_text(cmd):
  return subprocess.run(cmd, capture_output=True, text=True, check=True).stdout

def round_up(value, align):
  return align * ((value + align - 1) // align)

def make_mount(s, read_only):
  parts = s.split(':')
  if len(parts) == 1:
    host_path = image_path = pathlib.Path(parts[0])
  elif len(parts) == 2:
    host_path = pathlib.Path(parts[0])
    image_path = pathlib.Path(parts[1])
  else:
    raise ValueError(f'invalid format: {s}')

  if not host_path.exists():
    raise ValueError(f'host path does not exist: {host_path}')

  if not image_path.is_absolute():
    raise ValueError(f'image path must be absolute: {image_path}')

  return Mount(host_path, image_path, read_only)

def truncate(path_file, size):
  return subprocess.run(['truncate', path_file, '--size', str(size)], check=True)

def chroot(root_dir, cmd):
  return subprocess.run(['chroot', '.'] + cmd, cwd=root_dir)

def umount(mount_point, attempts=5, timeout=0.1):
  while attempts > 0:
    try:
      attempts -= 1
      return subprocess.run([UMOUNT, mount_point], check=True)
    except subprocess.CalledProcessError:
      time.sleep(timeout)

def split_existing(path):
  suffix = pathlib.Path()
  while not path.exists():
    suffix = path.name / suffix
    path = path.parent
  return path, suffix

@contextlib.contextmanager
def mount_point(path, as_file):
  existing, missing = split_existing(path)

  if not missing.parts:
    yield
  else:
    if as_file:
      if len(missing.parts) == 1:
        path.touch()
        try:
          yield
        finally:
          path.unlink()
      else:
        assert len(missing.parts) > 1
        path.parent.mkdir(parents=True)
        path.touch()
        try:
          yield
        finally:
          shutil.rmtree(existing / missing.parts[0])
    else:
      assert len(missing.parts) > 0
      path.mkdir(parents=True)
      try:
        yield
      finally:
        shutil.rmtree(existing / missing.parts[0])

@contextlib.contextmanager
def setup_loop_device(image_file, read_only=False):
  cmd = [LOSETUP, image_file, '--find', '--show', '--partscan']
  if read_only:
    cmd += ['--read-only']
  dev = run_text(cmd).strip()
  devs = json.loads(run_text([LSBLK, '--json', dev]))['blockdevices']
  assert(len(devs) == 1)

  p = re.compile(r'^loop\d+p(?P<num>\d+)$')
  parts = (part['name'] for part in devs[0]['children'])
  try:
    yield {int(p.match(part).group('num')) : f'/dev/{part}' for part in parts}
  finally:
    subprocess.run([LOSETUP, '--detach', dev], check=True)

@contextlib.contextmanager
def mount(dev, mount_dir, read_only):
  cmd = [MOUNT, dev, mount_dir]
  if read_only:
    cmd += ['--options', 'ro']
  subprocess.run(cmd, check=True)
  try:
    yield mount_dir
  finally:
    umount(mount_dir)

@contextlib.contextmanager
def bind_mount(host_path, image_path, read_only):
  if host_path.is_dir():
    as_file = False
  elif host_path.is_file():
    as_file = True
  else:
    raise ValueError('host path does not exist')

  with mount_point(image_path, as_file):
    cmd = [MOUNT, '--bind', host_path, image_path]
    if read_only:
      cmd += ['--options', 'ro']
    subprocess.run(cmd, check=True)
    try:
      yield image_path
    finally:
      umount(image_path)

def blkid(dev):
  try:
    stdout = run_text([BLKID, '--probe', '--output', 'export', dev])
    return dict(s.split('=') for s in stdout.strip().split('\n'))
  except subprocess.CalledProcessError:
    return {}

def read_partition_types():
  output = run_text([SFDISK, '--list-types']).strip()
  def kv(s):
    k, v = s.split('  ')
    return int(k, 16), v
  return dict(kv(line.strip()) for line in output.split('\n')[2:])

def read_partition_table(image_file):
  table = json.loads(run_text([SFDISK, '--json', image_file]))['partitiontable']
  sector_size = table.get('sectorsize', 512)
  types = read_partition_types()
  print(types)

  def partitions():
    for partition in table['partitions']:
      yield Partition(number=int(partition['node'][len(table['device']):]),
                      type=types[int(partition['type'], 16)],
                      start_sectors=int(partition['start']),
                      size_sectors=int(partition['size']),
                      sector_size=sector_size)

  return list(partitions())

def read_last_partition(image_file):
  partitions = read_partition_table(image_file)
  if not partitions:
    sys.exit('Image file has no partitions.')
  return partitions[-1]

@contextlib.contextmanager
def mount_image(image_file, root_dir, mounts, read_only):
  with contextlib.ExitStack() as stack:
    parts = stack.enter_context(setup_loop_device(image_file))
    stack.enter_context(mount(parts[2], root_dir, read_only))
    stack.enter_context(mount(parts[1], root_dir / 'boot', read_only))
    for m in mounts:
      stack.enter_context(bind_mount(m.host_path,
                                     root_dir / m.image_path.relative_to('/'),
                                     m.read_only))
    yield root_dir

@contextlib.contextmanager
def disable_ld_preload(root_dir):
  src = root_dir / 'etc' / 'ld.so.preload'
  bak = root_dir / 'etc' / 'ld.so.preload.bak'

  if src.exists():
    src.rename(bak)
    try:
      yield
    finally:
      bak.rename(src)
  else:
    yield

@contextlib.contextmanager
def mount_dir(root_dir):
  if root_dir:
    yield root_dir
  else:
    with tempfile.TemporaryDirectory() as tmp_dir:
      yield pathlib.Path(tmp_dir)

def copyfileobj(src, dst, data_hash, length=1024 * 1024):
  if data_hash is None:
    shutil.copyfileobj(src, dst, length)
    return

  h = hashlib.new(data_hash.name)
  while True:
    buf = src.read(length)
    if not buf:
      break
    h.update(buf)
    dst.write(buf)

  hexdigest = h.hexdigest()
  if hexdigest != data_hash.hexdigest:
    raise ValueError(f'{data_hash.name.upper()} checksum {hexdigest} is invalid')

def copyfileobj_safe(src, image_file, image_hash):
  try:
    with tempfile.NamedTemporaryFile(prefix='rpi-image-', delete=False) as dst:
      copyfileobj(src, dst, image_hash)
    shutil.move(dst.name, image_file)
  except ValueError as e:
    sys.exit(f'Image file {str(e)}')
  finally:
    pathlib.Path(dst.name).unlink(missing_ok=True)

def image_filename(url, no_extract=False):
  p = pathlib.Path(urllib.parse.unquote(urllib.parse.urlparse(url).path))

  if not no_extract:
    if p.suffix == '.xz':
      return p.stem, download_extract_xz
    if p.suffix == '.zip':
      return p.with_suffix('.img').name, download_extract_zip

  return p.name, download_only

def download_os_list(url):
  try:
    with urllib.request.urlopen(url) as f:
      return json.loads(f.read())['os_list']
  except urllib.error.HTTPError:
    return []

def os_list(download_subitems):
  queue = [download_os_list(OS_LIST_URL)]
  while queue:
    for item in queue.pop(0):
      if 'subitems' in item:
        queue.append(item['subitems'])
      elif 'subitems_url' in item:
        if download_subitems:
          queue.append(download_os_list(item['subitems_url']))
      else:
        yield item

def filtered_os_list(suffix, download_subitems):
  for item in os_list(download_subitems):
    name = image_filename(item['url'], no_extract=True)[0]
    if suffix in name:
      yield item

def subcommand_search(args):
  items = list(filtered_os_list(args.suffix, args.recursive))
  if args.json:
    print(json.dumps(items, indent=2))
  else:
    fields = args.fields.split(',')
    for item in items:
      print(','.join(str(item.get(field, '')) for field in fields))

def find_download_hash(url):
  for name in 'sha256', 'sha1', 'md5':
    try:
      with urllib.request.urlopen(f'{url}.{name}') as response:
        return Hash(name=name, hexdigest=response.read().decode().split()[0])
    except urllib.error.HTTPError:
      pass
  return None

def download_extract_xz(image_url, image_file, download_hash, extract_hash):
  del download_hash  # cannot check
  with urllib.request.urlopen(image_url) as resp, lzma.open(resp) as src:
    copyfileobj_safe(src, image_file, extract_hash)

def download_extract_zip(image_url, image_file, download_hash, extract_hash):
  with urllib.request.urlopen(image_url) as resp, \
       tempfile.NamedTemporaryFile(prefix='rpi-image-zip-') as archive:
    try:
      copyfileobj(resp, archive, download_hash)
    except ValueError as e:
      sys.exit(f'Archive file {str(e)}')

    with zipfile.ZipFile(archive.name) as zf:
      names = zf.namelist()
      if len(names) != 1:
        sys.exit('There are several files inside the archive instead of one.')

      with zf.open(names[0]) as f:
        copyfileobj_safe(f, image_file, extract_hash)

def download_only(image_url, image_file, download_hash, extract_hash):
  del extract_hash  # no extraction
  with urllib.request.urlopen(image_url) as resp:
    copyfileobj_safe(resp, image_file, download_hash)

def subcommand_download(args):
  if args.url:
    image_url = args.url
    download_hash = args.hash
    extract_hash = args.extract_hash
  else:
    items = list(filtered_os_list(args.suffix, args.recursive))
    if len(items) != 1:
      sys.exit(f'There are {len(items)} suffix matches instead of one.')
    item = items[0]
    image_url = item['url']

    download_hash = None
    if 'image_download_sha256' in item:
      download_hash = Hash(name='sha256', hexdigest=item['image_download_sha256'])

    extract_hash = None
    if 'extract_sha256' in item:
      extract_hash = Hash(name='sha256', hexdigest=item['extract_sha256'])

  filename, download = image_filename(image_url, args.no_extract)

  image_file = args.output if args.output else pathlib.Path(filename)
  if image_file.exists():
    sys.exit(f"Image file '{image_file}' already exists.")

  if not download_hash:
    download_hash = find_download_hash(image_url)

  download(image_url, image_file, download_hash, extract_hash)
  print(image_file)

def subcommand_flash(args):
  columns = 'NAME' , 'TYPE', 'FSTYPE' ,'RM', 'TRAN', 'SIZE', 'MOUNTPOINT'
  stdout = run_text([LSBLK, '--nodeps', '--json', '-o', ','.join(columns)])
  block_devs = json.loads(stdout)['blockdevices']
  block_devs = [dev for dev in block_devs if dev['rm'] and dev['tran'] == 'usb']

  if args.dev:
    devs = [dev for dev in block_devs if dev['name'] == args.dev]
    if len(devs) != 1:
      sys.exit(f'Cannot find device you specified: {args.dev}.')
    dev = devs[0]
  else:
    if not block_devs:
      sys.exit('There are no connected removable usb devices.')

    if len(block_devs) != 1:
      sys.exit('There are multiple removable usb devices, use --dev option to select.')

    dev = block_devs[0]

  answer = input(f"Selected device: /dev/{dev['name']} ({dev['size']}). Do you want to continue? (Y/N) ")
  if answer.lower() != 'y':
    return
  print(f"\ndd if={args.image} of=/dev/{dev['name']} bs=10m")

def subcommand_list(args):
  with setup_loop_device(args.image) as parts:
    if args.json:
      # TODO: convert strings to integers, e.g. BLOCK_SIZE.
      print(json.dumps([blkid(dev) for _, dev in parts.items()]))
    else:
      types = read_partition_types()
      for num, dev in parts.items():
        info = blkid(dev)
        part_type = types[int(info['PART_ENTRY_TYPE'][2:], 16)]
        part_offset = info['PART_ENTRY_OFFSET']
        part_size = info['PART_ENTRY_SIZE']
        fs_type = info.get('TYPE', 'N/A')
        fs_label = info.get('LABEL', 'N/A')
        print(f'{num}, type={part_type}, offset={part_offset}, size={part_size},',
              f'fs_type={fs_type}, fs_label={fs_label}')

def subcommand_expand(args):
  last_partition = read_last_partition(args.image)

  expand, new_partition_size = args.size
  if expand:
    new_partition_size += last_partition.size

  if new_partition_size < last_partition.size:
    sys.exit('New partition size cannot become smaller.')

  image_size = args.image.stat().st_size
  new_image_size = last_partition.start + new_partition_size

  print(f'=> Expanding image file (bytes): {image_size} -> {new_image_size}',
        f'(change: {new_image_size - image_size})')
  truncate(args.image, new_image_size)

  print(f'=> Expanding last partition (bytes): {last_partition.size} -> {new_partition_size}',
        f'(change: {new_partition_size - last_partition.size})')
  subprocess.run([SFDISK, '-N', str(last_partition.number), args.image],
                 input=', +', text=True, check=True)

  # Expand filesystem on last partition if any.
  with setup_loop_device(args.image) as parts:
    dev = parts[max(parts.keys())]
    if 'TYPE' not in blkid(dev):
      return

    print('=> Expanding filesystem:')
    print('==> Checking filesystem:')
    subprocess.run([E2FSK, '-yf', dev], check=True)
    print('==> Resizing filesystem:')
    subprocess.run([RESIZE2FS, dev], check=True)

def subcommand_append(args):
  last_partition = read_last_partition(args.image)
  new_partition_size = round_up(args.size, last_partition.sector_size)
  new_partition_size_sectors = new_partition_size // last_partition.sector_size

  image_size = args.image.stat().st_size
  new_image_size = last_partition.end + new_partition_size

  print(f'=> Expanding image file (bytes): {image_size} -> {new_image_size}',
        f'(change: {new_image_size - image_size})')
  truncate(args.image, new_image_size)

  print('=> Appending last partition:')
  subprocess.run([SFDISK, '--append', args.image],
                 input=f'{last_partition.end_sectors}, {new_partition_size_sectors}',
                 text=True, check=True)

  if not args.filesystem:
    return

  print('=> Creating filesystem:')
  with setup_loop_device(args.image) as parts:
    dev = parts[max(parts.keys())]
    cmd = [f'mkfs.{args.filesystem}', dev]
    if args.block_size:
      cmd += ['-b', str(args.block_size)]
    if args.label:
      cmd += ['-L', args.label]
    subprocess.run(cmd, check=True)

def subcommand_delete(args):
  partitions = read_partition_table(args.image)
  assert len(partitions) > 2

  print('=> Deleting partition:')
  subprocess.run([SFDISK, '--delete', args.image, str(partitions[-1].number)])
  truncate(args.image, partitions[-2].end)

def subcommand_mount(args):
  with mount_dir(args.directory) as root_dir:
    with mount_image(args.image, root_dir, [], args.read_only):
      sys.exit(subprocess.run(args.command, cwd=root_dir).returncode)

def subcommand_run(args):
  mounts = [make_mount(s, read_only=True) for s in ('/dev', '/sys', '/proc', '/dev/pts')]
  mounts += (args.bind or [])
  mounts += (args.bind_ro or [])

  if args.user:
    command = ['su', '-l', args.user]
    if args.command:
      command += ['-c', shlex.join(args.command)]
  else:
    command = args.command

  with mount_dir(args.directory) as root_dir:
    with mount_image(args.image, root_dir, mounts, args.read_only) as root_dir:
      with disable_ld_preload(root_dir):
        sys.exit(chroot(root_dir, command).returncode)

def nonempty_str(s):
  if not s:
    raise argparse.ArgumentTypeError('empty')
  return s

def existing_file(s):
  path = pathlib.Path(s)
  if not path.is_file():
    raise argparse.ArgumentTypeError(f'file does not exist: {s}')
  return path

def existing_dir(s):
  path = pathlib.Path(s)
  if not path.is_dir():
    raise argparse.ArgumentTypeError(f'directory does not exist: {s}')
  return path

def valid_mount(s, read_only):
  try:
    return make_mount(s, read_only)
  except ValueError as e:
    raise argparse.ArgumentTypeError(str(e))

def valid_filesystem(s):
  if shutil.which(f'mkfs.{s}') is None:
    raise argparse.ArgumentTypeError(f'invalid filesystem: {s}')
  return s

def valid_hash(s):
  name, hexdigest = s.split(':')
  try:
    h = hashlib.new(name)
  except ValueError as e:
    raise argparse.ArgumentTypeError(str(e))

  if len(h.hexdigest()) != len(hexdigest):
    raise argparse.ArgumentTypeError(f'invalid hexdigest length: {hexdigest}')

  return Hash(name, hexdigest)

UNIT_MULTIPLIER = {
  '': 1,
  'K': 1024,
  'M': 1024 ** 2,
  'G': 1024 ** 3,
  'KB': 1000,
  'MB': 1000 ** 2,
  'GB': 1000 ** 3,
}

def expand_size(s):
  SIZE_PATTERN = re.compile(r'''
    ^(?P<exapnd>\+?)          # optional '+'
     (?P<value>\d*\.\d+|\d+)  # float
     (?P<unit>%s)$            # unit
  ''' % '|'.join(UNIT_MULTIPLIER.keys()), re.VERBOSE)

  m = SIZE_PATTERN.match(s)
  if not m:
    raise argparse.ArgumentTypeError('e.g. +125M (relative) or 1.5G (absolute)')
  expand, value, unit = m.groups()
  return expand == '+', int(float(value) * UNIT_MULTIPLIER[unit])

def append_size(s):
  SIZE_PATTERN = re.compile(r'''
    ^(?P<value>\d*\.\d+|\d+)  # float
     (?P<unit>%s)$            # unit
  ''' % '|'.join(UNIT_MULTIPLIER.keys()), re.VERBOSE)

  m = SIZE_PATTERN.match(s)
  if not m:
    raise argparse.ArgumentTypeError('e.g. 125M or 1.5G')
  value, unit = m.groups()
  return int(float(value) * UNIT_MULTIPLIER[unit])

def main():
  parser = argparse.ArgumentParser(
      prog='rpi-image',
      description='Tool to manipulate Raspberry Pi images')
  subparsers = parser.add_subparsers(required=True, dest='subparser_name')

  search_parser = subparsers.add_parser('search', help='search for the image')
  search_parser.add_argument('--json', '-J', action='store_true',
                             help='dump info in JSON format')
  search_parser.add_argument('--fields', type=nonempty_str, default='url',
                             help='comma-separated fields to display')
  search_parser.set_defaults(func=subcommand_search, requires_root=False)

  download_parser = subparsers.add_parser('download', help='download image file')
  download_parser.add_argument('--url', metavar='IMAGE_URL', type=str)
  download_parser.add_argument('--hash', type=valid_hash, metavar='NAME:HEXDIGEST',
                               help='hash of the downloaded file')
  download_parser.add_argument('--extract-hash', type=valid_hash, metavar='NAME:HEXDIGEST',
                               help='hash of the extracted image file')
  download_parser.add_argument('--no-extract', action='store_true',
                               help='only download, do not extract image file')
  download_parser.add_argument('--output', '-O', type=pathlib.Path,
                               help='image file name')
  download_parser.set_defaults(func=subcommand_download, requires_root=False)

  for p in search_parser, download_parser:
    p.add_argument('--suffix', default='',
                   help='filter by image name')
    p.add_argument('--recursive', action='store_true',
                   help='recursively download subitems')

  flash_parser = subparsers.add_parser('flash', help='flash image to disk')
  flash_parser.add_argument('--dev', help='device to flash')
  flash_parser.set_defaults(func=subcommand_flash, requires_root=True)

  list_parser = subparsers.add_parser('list', help='list all partitions')
  list_parser.add_argument('--json', '-J', action='store_true',
                           help='dump info in JSON format')
  list_parser.set_defaults(func=subcommand_list, requires_root=True)

  expand_parser = subparsers.add_parser('expand', help='expand last partition')
  expand_parser.add_argument('--size', '-s', type=expand_size, required=True)
  expand_parser.set_defaults(func=subcommand_expand, requires_root=True)

  append_parser = subparsers.add_parser('append', help='append partition')
  append_parser.add_argument('--size', '-s', type=append_size, required=True)
  append_parser.add_argument('--filesystem', '-fs', type=valid_filesystem,
                             help='filesystem to create')
  append_parser.add_argument('--block-size', '-b', type=int,
                             help='filesystem block size (bytes)')
  append_parser.add_argument('--label', '-l',
                             help='partition label (when filesystem is created)')
  append_parser.set_defaults(func=subcommand_append, requires_root=True)

  delete_parser = subparsers.add_parser('delete', help='delete last partition')
  delete_parser.set_defaults(func=subcommand_delete, requires_root=True)

  mount_parser = subparsers.add_parser('mount', help='mount image and run command')
  mount_parser.set_defaults(func=subcommand_mount, requires_root=True)

  run_parser = subparsers.add_parser('run', help='run command inside the image')
  run_parser.add_argument('--bind', action='append', metavar='PATH:[PATH]',
                          type=functools.partial(valid_mount, read_only=False),
                          help='bind mount a file or directory from the host into the image')
  run_parser.add_argument('--bind-ro', action='append', metavar='PATH:[PATH]',
                          type=functools.partial(valid_mount, read_only=True),
                          help='similar, but creates a read-only bind mount')
  run_parser.add_argument('--user', '-u', help='run as logged in user')
  run_parser.set_defaults(func=subcommand_run, requires_root=True)

  for p in (flash_parser,
            list_parser, expand_parser, append_parser, delete_parser,
            mount_parser, run_parser):
    p.add_argument('--image', '-i', type=existing_file, metavar='FILE',
                   required=True, help='image file (.img)')

  for p in mount_parser, run_parser:
    p.add_argument('--read-only', action='store_true',
                   help='mount the root directory read-only')
    p.add_argument('--directory', '-D', type=existing_dir, metavar='DIR',
                   help='root directory for the image')
    p.add_argument('command', nargs='*', help='command to execute')

  args = parser.parse_args()
  if args.requires_root and os.geteuid() != 0:
    sys.exit("You need root privileges, try again using 'sudo'.")
  args.func(args)

if __name__ == '__main__':
  main()
